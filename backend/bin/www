#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../src/app.js');
const debug = require('debug')('backend:server');
const http = require('http');
const mongo = require('mongodb');

const config = require('./config.json');
const { app_port, db_name, db_port, collections } = config;

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || app_port);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Create MongoClient and port
 */
const MongoClient = mongo.MongoClient;
const url = "mongodb://localhost:" + db_port;

/**
 * Connects to the mongo database
 */
MongoClient.connect(url, { useNewUrlParser: true }).then(client => {
  console.log(client.topology.isConnected());
  // Set app database: viatra_db
  const db = client.db(db_name);
  
  // Create collections in the viatra_db database
  const collection_tracker = db.collection(collections.file_tracker);
  // Used to share the collections between routes
  app.locals.collection_tracker = collection_tracker;

  // Listen on provided port, on all network interfaces.
  console.log('Listening on port ' + port)
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

}).catch(error => console.error(error));

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
